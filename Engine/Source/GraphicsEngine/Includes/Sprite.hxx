// *********************************************************************************************************************
//  Sprite   version:  1.0   Ankur Sheel  date: 2011/02/16
// *********************************************************************************************************************
//  purpose:	
// *********************************************************************************************************************
#ifndef Sprite_hxx__
#define Sprite_hxx__

#include "GraphicEngineDefines.h"

namespace Base
{
	class cString;
	class cVector2;
}

namespace Graphics
{
	class ICamera;
	class ITexture;
}

namespace Graphics
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief Interface for 2D Sprites.
	///
	///
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class ISprite
	{
	public:
		virtual ~ISprite(){}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Initializes the sprite with the texture
		///
		/// @param[in] pTexture The texture associated with this sprite
		/// @return  True if the sprite was created.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual bool VInitialize(shared_ptr<ITexture> const pTexture) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Initializes the sprite with the texture
		///
		/// @param[in] strTextureFilename The path of the tmexture associated with
		/// this sprite
		/// @return  True if the sprite was created.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual bool VInitialize(const Base::cString & strTextureFilename) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Puts the 2d texture on the video card to prepare it for drawing
		/// by the shader
 		///
		/// @param[in] pCamera The camera which contains the current view matrix
		/// @return  True if the sprite was created.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VRender(const ICamera * const pCamera) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Releases and destroys all the resources 
 		///
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VCleanup() = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Sets the position of the sprite
 		///
		/// @param[in] vPosition The new position at which the sprite should be shown
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VSetPosition(const Base::cVector2 & vPosition) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Sets the size(scale in pixels) of the sprite
 		///
		/// @param[in] vSize The new size of the sprite
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VSetSize(const Base::cVector2 & vSize) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Gets the Scaled size(scale in pixels) of the sprite
 		///
		/// @return The scaled size of the sprite
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual Base::cVector2 VGetScaledSize() const = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Sets the scale of the sprite
		///
		/// @param[in] vScale The new scale of the sprite
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VSetScale(const Base::cVector2 & vScale) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Gets the texture of the sprite
		///
		/// @return The texture of the sprite
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual shared_ptr<Graphics::ITexture> VGetTexture() const = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Sets the texture of the sprite
		///
		/// @param[in] pTexture The new texture of the sprite
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VSetTexture( shared_ptr<ITexture> const pTexture) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Returns an object to use this interface
		///
		/// @return An object to use this interface
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		GRAPHIC_API static ISprite * CreateSprite();
	};
}
#endif // Sprite_h__