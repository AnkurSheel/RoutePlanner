//  *******************************************************************************************************************
//  StringUtilities   version:  1.0   Ankur Sheel  date: 2014/09/03
//  *******************************************************************************************************************
// 
//  *******************************************************************************************************************
#ifndef __STRINGUTILITIES_H__
#define __STRINGUTILITIES_H__

#include "BaseDefines.h"
#include "myString.h"

namespace Base
{
	template<class T>
	class tOptional;
}

namespace Base
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief String class 
	///
	/// 
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class cStringUtilities
	{

	public:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Makes a formatted string
		///
		/// @param[in] inpFmt The format control
		/// @param[in] ... variable number of arguments
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		BASE_API static cString MakeFormatted(const char * const  inpFmt, ...);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Gets the string in lowercase
		///
		/// @return A duplicate of the string with all lowercase characters
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		BASE_API static cString GetInLowerCase(const cString & str);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Convert a time value to a string 
		///
		/// @return The time as a string
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		BASE_API static cString CalendarTimeToString(time_t time);

	private:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constructor
		///
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		BASE_API cStringUtilities();
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Adds two strings together
	///
	/// @param[in] lhs The left hand string
	/// @param[in] rhs The right hand string
	/// @return A string object which is rhs appended to lhs
	///
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	BASE_API cString operator + (const cString & lhs, const cString & rhs);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Adds a character array and a string
	///
	/// @param[in] lhs The character array
	/// @param[in] rhs The string
	/// @return A string object which is rhs appended to lhs
	///
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	BASE_API cString operator + (const char * lhs, const cString & rhs);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Adds a string and a character array
	///
	/// @param[in] lhs The string
	/// @param[in] rhs The character array
	/// @return A string object which is rhs appended to lhs
	///
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	BASE_API cString operator + (const cString & lhs, const char* rhs);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Writes a string to the output stream
	///
	/// @param[in] os The output stream being written to
	/// @param[in] str The string to be written
	/// @return Writes the value of the specified string to the output stream
	///
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	BASE_API std::ostream& operator << (std::ostream& os, const cString & str);
}
#endif  // __STRINGUTILITIES_H__