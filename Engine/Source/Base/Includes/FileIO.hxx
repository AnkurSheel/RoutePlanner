//  *******************************************************************************************************************
//  FileIO   version:  1.0   Ankur Sheel  date: 2014/10/30
//  *******************************************************************************************************************
// 
//  *******************************************************************************************************************
#ifndef __FILEIO_HXX__
#define __FILEIO_HXX__

#include "BaseDefines.h"

namespace Base
{
	class IFileIO
	{
	public:
		virtual ~IFileIO(){}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Opens the file for IO
		///
		/// @param[in] fileName The name of the file to be opened.
		/// @param[in] mode The mode that the file should be opened in.
		/// @return True if the file was successfully opened. False otherwise
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual bool VOpenFile(const cString & fileName, const std::ios_base::openmode mode) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Closes the file.
		///
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VCloseFile() = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Writes the text to the file.
		///
		/// @param[in] text The text that has to be written
		/// @return True if the text was successfully written. False otherwise
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual bool VWriteLine(const cString & text) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Writes the buffer to the file.
		///
		/// @param[in] pBuffer Pointer to the block of data to write of n characters
		/// @param[in] size The number characters to insert
		/// @return True if buffer was successfully written. False otherwise
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual bool VWrite(const char * pBuffer, unsigned long size) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Copies a maximum of size bytes into pBuffer. Should not be used for ascii files unless you know what you are 
		/// doing.
		///
		/// @param[out] pBuffer The contents of the file
		/// @param[in] size the size of the buffer.
		/// @return True if file was successfully read. False otherwise.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual bool VRead(char * const pBuffer, unsigned long size) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Writes the text to the file.
		///
		/// @return The line of text that was read.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual cString VReadLine() = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Flushes the stream.
		///
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VFlush() = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Returns the file name.
		///
		/// @return The file name.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual const cString & VGetFileName() = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Returns True if we have reached the End of File. False Otherwise
		///
		/// @return True if we have reached the End of File. False Otherwise
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual bool VIsEOF() const = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Returns the file size.
		///
		/// @return The file size.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual unsigned long VGetFileSize() const = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Returns input position indicator.
		///
		/// @return The current position of the get pointer on success, -1 on failure.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual unsigned long VGetCurrentInputPosition() = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Sets input position indicator.
		///
		/// @param[in] relativePosition Relative position to set the input position indicator to.
		/// @param[in] dir Defines base position to apply the relative offset to.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void VSetCurrentInputPosition(const int relativePosition, std::ios_base::seekdir dir) = 0;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Creates and returns an object of IFileIO.
		///
		/// @return An object of IFileIO.
		///
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		BASE_API static  IFileIO * CreateFileIO();
	};
}
#endif  // __FILEIO_HXX__

